// Task 1: Get all books
exports.getBooks = async (req, res) => {
    const db = await readDB();
    res.json(db.books);
};

// Task 2: Get books by ISBN
exports.getBookByISBN = async (req, res) => {
    const db = await readDB();
    const book = db.books.find(b => b.isbn === req.params.isbn);
    book ? res.json(book) : res.status(404).json({ error: 'Book not found' });
};

// Task 3: Get books by Author
exports.getBooksByAuthor = async (req, res) => {
    const db = await readDB();
    const books = db.books.filter(b => b.author === req.params.author);
    res.json(books);
};

// Task 4: Get books by Title
exports.getBooksByTitle = async (req, res) => {
    const db = await readDB();
    const books = db.books.filter(b => b.title.includes(req.params.title));
    res.json(books);
};

// Task 5: Get book reviews
exports.getBookReviews = async (req, res) => {
    const db = await readDB();
    const book = db.books.find(b => b.id === parseInt(req.params.id));
    book ? res.json(book.reviews) : res.status(404).json({ error: 'Book not found' });
};

// Task 6: Register new user
exports.registerUser = async (req, res) => {
    const { username, password } = req.body;
    const db = await readDB();
    if (db.users.find(u => u.username === username)) {
        return res.status(400).json({ error: 'User already exists' });
    }
    db.users.push({ username, password });
    await writeDB(db);
    res.status(201).json({ message: 'User registered successfully' });
};

// Task 7: Login as a registered user
exports.loginUser = async (req, res) => {
    const { username, password } = req.body;
    const db = await readDB();
    const user = db.users.find(u => u.username === username && u.password === password);
    user ? res.json({ message: 'Login successful' }) : res.status(401).json({ error: 'Invalid credentials' });
};

// Task 8: Add or modify a review
exports.addOrModifyReview = async (req, res) => {
    const db = await readDB();
    const book = db.books.find(b => b.id === parseInt(req.params.id));
    if (!book) return res.status(404).json({ error: 'Book not found' });

    const { user, review } = req.body;
    const existingReview = book.reviews.find(r => r.user === user);
    if (existingReview) {
        existingReview.review = review;
    } else {
        book.reviews.push({ user, review });
    }
    await writeDB(db);
    res.json(book.reviews);
};

// Task 9: Delete a review
exports.deleteReview = async (req, res) => {
    const db = await readDB();
    const book = db.books.find(b => b.id === parseInt(req.params.id));
    if (!book) return res.status(404).json({ error: 'Book not found' });

    const reviewIndex = book.reviews.findIndex(r => r.user === req.params.reviewId);
    if (reviewIndex === -1) return res.status(404).json({ error: 'Review not found' });

    book.reviews.splice(reviewIndex, 1);
    await writeDB(db);
    res.json({ message: 'Review deleted successfully' });
};






const axios = require('axios');

// Task 10: Get all books using async callback
async function getAllBooks(callback) {
    try {
        const response = await axios.get('https://api.example.com/books');
        callback(null, response.data);
    } catch (error) {
        callback(error);
    }
}

// Task 11: Search by ISBN using Promises
function getBookByISBN(isbn) {
    return axios
        .get(`https://api.example.com/books?isbn=${isbn}`)
        .then(response => response.data)
        .catch(error => { throw error });
}

// Task 12: Search by Author using async/await
async function getBooksByAuthor(author) {
    try {
        const response = await axios.get(`https://api.example.com/books?author=${author}`);
        return response.data;
    } catch (error) {
        throw error;
    }
}

// Task 13: Search by Title
async function getBooksByTitle(title) {
    try {
        const response = await axios.get(`https://api.example.com/books?title=${title}`);
        return response.data;
    } catch (error) {
        throw error;
    }
}

// Example usage
getAllBooks((error, books) => {
    if (error) console.error('Error fetching books:', error);
    else console.log('Books:', books);
});

getBookByISBN('1234567890')
    .then(book => console.log('Book:', book))
    .catch(error => console.error('Error:', error));

(async () => {
    try {
        const booksByAuthor = await getBooksByAuthor('John Doe');
        console.log('Books by Author:', booksByAuthor);
    } catch (error) {
        console.error('Error:', error);
    }
})();
